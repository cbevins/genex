import fs from 'fs'
import { GedcomContextFilter } from './lib/genex/data/saved/GedcomContextFilter.js'
import { _gedcomAll } from './lib/genex/data/tmp/GedcomAllJson.js'
import { selectLines } from './lib/genex/gedcom/selectLines.js'

const time1 = new Date()
export function intFmt(val, wid=0, sep=true) { return numFmt(val, 0, wid, sep) }

// 1 - Process and test command line parameters
const usage = "usage: gedcomContextFilter <GEDCOM input file> <GEDCOM filtered file>"
if (process.argv.length < 4) {
    console.log(usage)
    process.exit(1)
}
const progName = (process.argv[1]).split('\\').pop()
const inputFile = process.argv[2]
fs.exists(inputFile, (exists) => {
    if (! exists) {
        console.log(`${progName} ERROR: GEDCOM input file '${inputFile}' NOT FOUND.`)
        process.exit(1)
    }
})
const outputFile = process.argv[3]

// 2 - Get selected lines
const keepersSet = new Set()
GedcomContextFilter.forEach(item => keepersSet.add(item))
const selected = selectLines(_gedcomAll, keepersSet)

// 3 - Create JSON string from the Javascript array
let js = `// auto-generated by ${progName}\n`
js += `// from GEDCOM file '${inputFile}'\n`
js += `// on ${new Date().toLocaleString()}\n`
js += `export const _gedcom = [\n`
for(let i=0; i<selected.length; i++) js += JSON.stringify(selected[i]) + ',\n'
js += ']\n'

// 4 - Write the JSON to a file for later use
fs.writeFile(outputFile, js, function (err) {
    if (err) throw err
})

const time2 = new Date()
console.log( `${progName} ${inputFile} ${outputFile} (${time2-time1} msec)`)
console.log(`    Selected ${selected.length} of ${_gedcomAll.length} records.`)
