/**
 * GEDCOM files are plain ASCII files that must be read asyn by Javascript.
 * This script stores the GEDCOM file lines inside a Javascript array
 * which is then written to a JSON data file.
 * This file may then be *imported* by other Javascript files without async/await.
 *
 * node .\gedcom2Json.js ./lib/genex/data/tmp/Ancestry.ged ./lib/genex/data/tmp/GedcomJson.js)
 */
import fs from 'fs'
import { file2JsonArray } from './lib/genex/file-reader/file2JsonArray.js'
const time1 = new Date()

// 1 - Process and test command line parameters
const usage = "usage: gedcom2Json <GEDCOM input file> <JSON output file>"
if (process.argv.length < 4) {
    console.log(usage)
    process.exit(1)
}
const progName = (process.argv[1]).split('\\').pop()
const gedcomFile = process.argv[2]
fs.exists(gedcomFile, (exists) => {
    if (! exists) {
        console.log(`${progName} ERROR: GEDCOM input file '${gedcomFile}' NOT FOUND.`)
        process.exit(1)
    }
})
const jsonFile = process.argv[3]

// 2 - Read GEDCOM file into a Javascript array
const lines = await file2JsonArray(gedcomFile)

// 3 - Create JSON string from the Javascript array
let js = `// auto-generated by ${progName}\n`
js += `// from GEDCOM file '${gedcomFile}'\n`
js += `// on ${new Date().toLocaleString()}\n`
js += `export const _gedcomAll = [\n`
for(let i=0; i<lines.length; i++) js += JSON.stringify(lines[i]) + ',\n'
js += ']\n'

// 4- Write the JSON to a file for later use
fs.writeFile(jsonFile, js, function (err) {
    if (err) throw err
})

const time2 = new Date()
console.log( `${progName} ${gedcomFile} ${jsonFile} (${time2-time1} msec)`)
console.log(`    Processed ${lines.length} GEDCOM file records.`)
