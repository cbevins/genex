import fs from 'fs'
import { parseRecord } from '../gedcom/parseRecord.js'
import { _gedcomRecordsFiltered } from './generated/gedcom/_gedcomRecordsFiltered.js'
import { _gedcomPLAC2StandardMASTER } from './customized/_gedcomPLAC2StandardMASTER.js'

const time1 = new Date()
const progName = (process.argv[1]).split('\\').pop()
const masterFile = './customized/_gedcomPLAC2StandardMASTER.js'
const inputFile = './generated/gedcom/_gedcomRecordsFiltered.js'
const foundName = '_gedcomPLAC2Standard'
const foundFile = `./generated/gedcom/${foundName}.js`
const missingName = '_gedcomPLAC2StandardMissing'
const missingFile = `./diagnostics/gedcom/${missingName}.js`

// Checks if each PLAC record content is in the MASTER array
function findGedcomPlaceKeys(records, placeMap) {
    const foundMap = new Map()
    const missing = []
    for (let i=0; i<records.length; i++) {
        const data = parseRecord(records[i], i+1)
        if (data) {
            const [level, type, content] = data
            if (type === 'PLAC') {
                const standardKey = placeMap.get(content)
                if (standardKey) {
                    foundMap.set(content, standardKey)
                } else {
                    // console.log(`Missing PLAC key '${content}' at GEDCOM record index ${i}`)
                    missing.push([content, i])
                }
            }
        }
    }
    missing.sort()
    const found = Array.from(foundMap.entries()).sort()
    return [found, missing]
}

const map = new Map(_gedcomPLAC2StandardMASTER)
const [found, missing] = findGedcomPlaceKeys(_gedcomRecordsFiltered, map)

// Write missing PLACes
let head = [
    `// auto-generated by ${progName} on ${new Date().toLocaleString()}`,
    `// from FILTERED GEDCOM JSON records file '${inputFile}'`,
    `// Each element is [<GEDCOM PLAC record content>, <GEDCOM PLAC record index>]`,
    `export const ${missingName} = [`
]
let js = head.join('\n') + '\n'
for(let i=0; i<missing.length; i++) {
    const [content, recordIdx] = missing[i]
    js += `    ["${content}", ${recordIdx}],\n`
}
js += ']\n'
fs.writeFile(missingFile, js, function (err) { if (err) throw err })

// Write GEDCOM referenced PLACes
head = [`// auto-generated by ${progName} on ${new Date().toLocaleString()}`,
    `// from FILTERED GEDCOM JSON records file '${inputFile}'.`,
    `// Each element is [<GEDCOM PLAC record content>, <GEDCOM PLAC standard key>]`,
    `export const ${foundName} = [`]
js = head.join('\n') + '\n'
for(let i=0; i<found.length; i++) {
    const [plac, standard] = found[i]
    js += `    ["${plac}", "${standard}"],\n`
}
js += ']\n'
fs.writeFile(foundFile, js, function (err) { if (err) throw err })
    
console.log(`\n${progName}`)
console.log(`    1 - read ${_gedcomRecordsFiltered.length} [<GEDCOM record>] elements from '${inputFile}'.`)
console.log(`    2 - wrote ${found.length} [<GEDCOM PLAC content>, <standard key>] elements into '${foundFile}'.`)
if (missing.length) {
    console.log(`    3 - wrote ${missing.length} *MISSING* [GEDCOM PLAC content>, <GEDCOM PLAC record index>] elements into '${missingFile}'.`)
    console.log(`    *** These must be hand-entered into the master file '${masterFile}'. ***`)
    console.log(`    Completed with WARNINGS in ${new Date()-time1} msec`)
} else {
    console.log(`    Successfully completed in ${new Date()-time1} msec`)
}
