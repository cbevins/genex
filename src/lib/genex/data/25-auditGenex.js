import fs from 'fs'
import { Auditor } from '../genex/Auditor.js'
import { Genex } from '../genex/Genex.js'

function fix(str) { return JSON.stringify(str) }

// Runs Auditor for each Person instance in the people array
function audit(people) {
    const findings = []
    for(let i=0; i<people.length; i++) {
        const person = people[i]
        const report = auditor.audit(person)    // {person, gedKey, nameKey, items, gen, file, seq}
        if(report.log.length) {
            report.gen = person.lineageGen()
            report.file = person.lineageFile()
            report.seq = person.lineageSeq()
            findings.push(report)
        }
    }
    return findings
}

// Write Genex _audit.js file
function writeFindings(auditName, nameKey, findings, people) {
    const auditFile = `./diagnostics/genex/${auditName}.js`
    let js = `// auto-generated by ${progName} on ${new Date().toLocaleString()}\n`
        + `// Audit of ancestors of ${nameKey}\n`
        + `// Contains findings for ${findings.length} of ${people.length} Persons:\n`
        + `export const ${auditName} = [\n`
    let items = 0
    for(let i=0; i<findings.length; i++) {
        const {person, gedKey, nameKey, gen, file, seq, log} = findings[i]
        items += log.length
        js += `    [${fix(gedKey)}, ${fix(nameKey)}, ${gen}, ${fix(file)}, ${seq}, [\n`
        for(let j=0; j<log.length; j++) {
            const [code, msg] = log[j]
            js += `        [${fix(code)}, ${fix(msg)}],\n`
        }
        js += `    ]],\n`
    }
    js += ']\n'
    fs.writeFile(auditFile, js, function (err) { if (err) throw err })
    console.log(`    2 - wrote ${items} Genex Auditor items for ${findings.length} of ${people.length} Persons into '${auditFile}'.`)
}

function ancestorsArray(lineage, nameKey) {
    const persons = []
    const startNode = lineage.findNodeByNameKey(nameKey)
    _next(startNode, persons)
    return persons
}
function _next(node, persons) {
    persons.push(node.person)
    if (node.father) _next(node.father, persons)
    if (node.mother) _next(node.mother, persons)
}

const time1 = new Date()
const progName = (process.argv[1]).split('\\').pop()

const auditName = '_auditResults'
const auditFile = `./diagnostics/genex/${auditName}.js`

const genex = new Genex()
const auditor = new Auditor()

console.log(`\n${progName}`)
console.log(`    1 - created Genex with ${genex.people().length} Person and ${genex.family().length} Family instances.`)

const lineages = [
    ['Samuel Bevins 1881', 'Bevins', genex.lineageBH()],
    ['Hattie Jane Collins 1889', 'Collins', genex.lineageBH()],
    ['Ralph Vernon Heddens 1909', 'Heddens', genex.lineageBH()],
    ['Margaret Eva Nattrass 1914', 'Nattrass', genex.lineageBH()],
    ['Sheldon James Riley 1902', 'Riley', genex.lineageRT()],
    ['Gladys Mae De Reus 1907', 'DeReus',  genex.lineageRT()],
    ['Harold Richard Trombley 1901', 'Trombley', genex.lineageRT()],
    ['Myrtle Estelle Nelson 1899', 'Nelson', genex.lineageRT()]
]
for (let i=0; i<lineages.length; i++) {
    const [nameKey, label, lineage] = lineages[i]
    const persons = ancestorsArray(lineage, nameKey)
    const findings = audit(persons)
    writeFindings(`_auditResults${label}`, nameKey, findings, persons)
}

console.log(`    Successfully completed in ${new Date()-time1} msec`)
