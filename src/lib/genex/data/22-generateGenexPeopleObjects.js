// Modules
import fs from 'fs'
import { GedcomDateParser } from '../gedcom/GedcomDateParser.js'
import { GedcomNameParser } from '../gedcom/GedcomNameParser.js'
// Data
import { _indiObjects } from './generated/gedcom/_indiObjects.js'
import { _gedcomKnownNamePrefixes } from './customized/_gedcomKnownNamePrefixes.js'
import { _gedcomKnownDateQuals, _gedcomKnownDateMonths } from './customized/_gedcomKnownDateMonths.js'
import { _places } from './generated/genex/_places.js'

const time1 = new Date()
const progName = (process.argv[1]).split('\\').pop()
const indiName = '_indiObjects'
const indiFile = `./generated/gedcom/${indiName}.js`
const peopleName = '_people'
const peopleFile = `./generated/genex/${peopleName}.js`

const nameParser = new GedcomNameParser(_gedcomKnownNamePrefixes)
const dateParser = new GedcomDateParser(_gedcomKnownDateQuals, _gedcomKnownDateMonths)
const placesMap = new Map(_places)

function fix(str) { return JSON.stringify(str) }

function placeIndex(text) {
    if (! placesMap.has(text)) throw new Error(`UNKNOWN PLACE '${text}'`)
    const [standard, idx] = placesMap.get(text)
    return idx
}

function nameKey(person) {
    const name = ((person.name.middle).concat(person.name.last)).join(' ')
    return [person.name.first, name, person.birth.date.y].join(' ')
}

const people = []
for(let i=0; i<_indiObjects.length; i++) {
    const [indiKey, indi] = _indiObjects[i]
    const person = {gedKey: indiKey, nameKey: ''}
    // Parse the person.name object
    const n = indi.name
    person.name = nameParser.parse(n.name, n.givn, n.surn, n.nsfx)
    person.sex = indi.sex

    // GenEvents
    person.birth = {
        date: dateParser.eventDate(indi.birt.date),
        placeIndex: placeIndex(indi.birt.plac),
        event: null
    }
    person.death = {
        date: dateParser.eventDate(indi.deat.date),
        placeIndex: placeIndex(indi.deat.plac),
        event: null
    }
    person.residences = []
    for(let i=0; i<indi.resi.length; i++) {
        person.residences.push({
            date: dateParser.eventDate(indi.resi[i].date),
            placeIndex: placeIndex(indi.resi[i].plac),
            event: null
        })
    }

    // Families
    person.famc = {key: indi.famc, family: null}
    person.fams = []
    for(let i=0; i<indi.fams.length; i++)
        person.fams.push({key: indi.fams[i], family: null})

    //
    person.nameKey = nameKey(person)
    people.push(person)
}

// Write Genex _people file
const head = [`// auto-generated by ${progName} on ${new Date().toLocaleString()}`,
    `// from '${indiFile}'.`,
    `// Each element is Genex Person object`,
    `import { Person } from '../../../genex/Person.js'`,
    `export const ${peopleName} = [`]
let js = head.join('\n') + '\n'
for(let i=0; i<people.length; i++) {
    const p = people[i]
    // js += `    new Person(${JSON.stringify(people[i], null, 4)}),\n`
    js += `    new Person({\n`
    js += `        gedKey: ${fix(p.gedKey)},\n`
    js += `        nameKey: ${fix(p.nameKey)},\n`
    js += `        sex: ${fix(p.sex)},\n`
    js += `        name: {\n`
    js += `            name: ${fix(p.name.name)},\n`
    js += `            prefixes: ${fix(p.name.prefixes)},\n`
    js += `            first: ${fix(p.name.first)},\n`
    js += `            middle: ${fix(p.name.middle)},\n`
    js += `            nicks: ${fix(p.name.nicks)},\n`
    js += `            last: ${fix(p.name.last)},\n`
    js += `            others: ${fix(p.name.others)},\n`
    js += `            suffixes: ${fix(p.name.suffixes)},\n`
    js += `            file: ${fix(p.name.file)},\n`
    js += `        },\n`
    js += `        birth: ${fix(p.birth)},\n`
    js += `        death: ${fix(p.death)},\n`
    js += `        famc: ${fix(p.famc)},\n`
    js += `        fams: ${fix(p.fams)},\n`
    js += `        residences: [\n`
    for(let i=0; i<p.residences.length; i++)
        js += `            ${fix(p.residences[i])},\n`
    js += `        ],\n`
    js += `        lineage: {type: 0, mother: null, father: null, child: null,\n`
    js += `            tree: '', gen: 0, seq: 0, channel: 0, ancestors: 0, file: ''}\n`
    js += `    }),\n`
}
js += ']\n'
fs.writeFile(peopleFile, js, function (err) { if (err) throw err })

console.log(`\n${progName}`)
console.log(`    1 - read ${_indiObjects.length} [<GEDCOM INDI>] elements from '${indiFile}'.`)
console.log(`    2 - wrote ${_indiObjects.length} Genex Person object into '${peopleFile}'.`)
console.log(`    Successfully completed in ${new Date()-time1} msec`)
