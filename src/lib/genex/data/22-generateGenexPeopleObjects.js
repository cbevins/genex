// Modules
import fs from 'fs'
import { GedcomDateParser } from '../gedcom/GedcomDateParser.js'
import { GedcomNameParser } from '../gedcom/GedcomNameParser.js'
// Data
import { _indiObjects } from './generated/gedcom/_indiObjects.js'
import { _famObjects } from './generated/gedcom/_famObjects.js'
import { _gedcomKnownNamePrefixes } from './customized/_gedcomKnownNamePrefixes.js'
import { _gedcomKnownDateQuals, _gedcomKnownDateMonths } from './customized/_gedcomKnownDateMonths.js'
import { _places } from './generated/genex/_places.js'

const time1 = new Date()
const progName = (process.argv[1]).split('\\').pop()
const indiName = '_indiObjects'
const indiFile = `./generated/gedcom/${indiName}.js`
const famName = '_famObjects'
const famFile = `./generated/gedcom/${famName}.js`
const peopleName = '_people'
const peopleFile = `./generated/genex/${peopleName}.js`

const nameParser = new GedcomNameParser(_gedcomKnownNamePrefixes)
const dateParser = new GedcomDateParser(_gedcomKnownDateQuals, _gedcomKnownDateMonths)
const placesMap = new Map(_places)

function placeIndex(text) {
    if (! placesMap.has(text)) throw new Error(`UNKNOWN PLACE '${text}'`)
    const [standard, idx] = placesMap.get(text)
    return idx
}

const people = []
for(let i=0; i<_indiObjects.length; i++) {
    const [indiKey, indi] = _indiObjects[i]
    const person = {gedKey: indiKey}
    // Parse the person.name object
    const n = indi.name
    person.name = nameParser.parse(n.name, n.givn, n.surn, n.nsfx)
    person.sex = indi.sex
    person.birth = {
        date: dateParser.eventDate(indi.birt.date),
        place: placeIndex(indi.birt.plac)
    }
    person.death = {
        date: dateParser.eventDate(indi.deat.date),
        place: placeIndex(indi.deat.plac)
    }
    person.famc = {key: indi.famc, family: null}
    person.fams = []
    for(let i=0; i<indi.fams.length; i++)
        person.fams.push({key: indi.fams[i][0], family: null})

    person.residences = []
    for(let i=0; i<indi.resi.length; i++) {
        const r = {
            date: dateParser.eventDate(indi.resi[i].date),
            place: placeIndex(indi.resi[i].plac)
        }
        person.residences.push(r)
    }
    people.push(person)
}

// Write Genex _people file
const head = [`// auto-generated by ${progName} on ${new Date().toLocaleString()}`,
    `// from '${indiFile}' and '${famFile}'.`,
    `// Each element is Genex Person object`,
    `export const ${peopleName} = [`]
let js = head.join('\n') + '\n'
for(let i=0; i<people.length; i++) {
    js += `    ${JSON.stringify(people[i], null, 4)},\n`
}
js += ']\n'
fs.writeFile(peopleFile, js, function (err) { if (err) throw err })

console.log(`\n${progName}`)
console.log(`    1 - read ${_indiObjects.length} [<GEDCOM INDI>] elements from '${indiFile}'.`)
console.log(`    2 - read ${_famObjects.length} [<GEDCOM FAM>] elements from '${famFile}'.`)
console.log(`    3 - wrote ${_indiObjects.length} Genex Person object into '${peopleFile}'.`)
console.log(`    Successfully completed in ${new Date()-time1} msec`)
