import fs from 'fs'
import { parseRecord } from '../gedcom/parseRecord.js'
import { _gedcomRecordsFiltered } from './generated/gedcom/_gedcomRecordsFiltered.js'
import { CounterMap } from '../utils/CounterMap.js'
import { Tokenizer } from '../utils/Tokenizer.js'

const time1 = new Date()
const progName = (process.argv[1]).split('\\').pop()
const inputFile = './generated/gedcom/_gedcomRecordsFiltered.js'
const outputName = '_gedcomGivenNameCounts'
const outputFile = `./diagnostics/gedcom/${outputName}.js`

const counter = new CounterMap()
const tokenizer = new Tokenizer()

for (let i=0; i<_gedcomRecordsFiltered.length; i++) {
    const data = parseRecord(_gedcomRecordsFiltered[i], i+1)
    if (data) {
        const [level, type, content] = data
        if (type === 'GIVN') {
            const names = tokenizer.tokenize(content)
            if (names.length) counter.add(names[0])
        }
    }
}
// const counts = counter.byItem().sort()
const counts = counter.byCount()

// Write GEDCOM referenced PLACes
const head = [`// auto-generated by ${progName} on ${new Date().toLocaleString()}`,
    `// from FILTERED GEDCOM JSON records file '${inputFile}'.`,
    `// Each element is [<GEDCOM GIVN record content>, <count>]`,
    `export const ${outputName} = [`]
let js = head.join('\n') + '\n'
for(let i=0; i<counts.length; i++) {
    const [givn, count] = counts[i]
    js += `    [${JSON.stringify(givn)}, ${count}],\n`
}
js += ']\n'
fs.writeFile(outputFile, js, function (err) { if (err) throw err })
    
console.log(`\n${progName}`)
console.log(`    1 - read ${_gedcomRecordsFiltered.length} [<GEDCOM record>] elements from '${inputFile}'.`)
console.log(`    2 - wrote ${counts.length} [<GEDCOM PLAC content>, <standard key>] elements into '${outputFile}'.`)
console.log(`    Successfully completed in ${new Date()-time1} msec`)
