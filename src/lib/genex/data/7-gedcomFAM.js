import fs from 'fs'
import {_gedcomRecordsFiltered} from './generated/gedcom/_gedcomRecordsFiltered.js'
import { parseLine } from '../gedcom/parseLine.js'
import { constructGedcom } from '../gedcom/constructGedcomNestedRecords.js'


function getToplevel(records, recType) {
    const start = []
    for(let i=0; i<records.length; i++) {
        const [level, type, content] = parseLine(records[i], i)
        if (level === 0 && type === recType) start.push(i) 
    }
    for (let i=0; i<start.length; i++) {
        let idx = start[i]
        let [level, type, key] = parseLine(records[idx], idx)
        console.log(type, key, idx, records.length)
        while(idx < records.length-1) {
            idx++
            let [level, type, content] = parseLine(records[idx], idx)
            if (level === 0) break
            console.log('    ',type)
        }
    }
}
getToplevel(_gedcomRecordsFiltered, 'FAM')
process.exit(1)

const time1 = new Date()
const progName = (process.argv[1]).split('\\').pop()
const inputFile = './generated/gedcom/_gedcomRecordsFiltered.js'
const varName = '_gedcomFAM'
const outputFile = `./generated/gedcom/${varName}.js`

const gedcom = constructGedcom(_gedcomRecordsFiltered)
const famMap = gedcom.topLevelRecordsFor('FAM')
const famsArray = Array.from(famMap.entries())

let head = [`// auto-generated by ${progName} on ${new Date().toLocaleString()}`,
    `// from FILTERED GEDCOM JSON records file '${inputFile}'.`,
    `export const ${varName} = [`]
let js = head.join('\n') + '\n'

const multiples = []
for (let i=0; i<famsArray.length; i++) {
    const [key, entry] = famsArray[i]
    const fam = getFAM(key)
    js += jsonFAM(fam)
    // Add any multiple HUSB/WIFE/DATE/PLAC records into multiples[]
    checkFAM(fam)
}
js += ']\n'
fs.writeFile(outputFile, js, function (err) { if (err) throw err })

if (multiples.length) {
    // console.log(multiples)
}

function getFAM(key) {
    const chil = gedcom.findAllContent(key, ['FAM', 'CHIL'])
    const husb = gedcom.findAllContent(key, ['FAM', 'HUSB'])
    const wife = gedcom.findAllContent(key, ['FAM', 'WIFE'])
    const date = gedcom.findAllContent(key, ['FAM', 'MARR', 'DATE'])
    const plac = gedcom.findAllContent(key, ['FAM', 'MARR', 'PLAC'])
    return {key, husb, wife, chil, date, plac}
}

function jsonFAM(fam) {
    let str = `["${fam.key}", {\n`
    str += `    husb: ` + JSON.stringify(fam.husb.length ? fam.husb[0] : '') + ',\n'
    str += `    wife: ` + JSON.stringify(fam.wife.length ? fam.wife[0] : '') + ',\n'
    str += `    date: ` + JSON.stringify(fam.date.length ? fam.date[0] : '') + ',\n'
    str += `    plac: ` + JSON.stringify(fam.plac.length ? fam.plac[0] : '') + ',\n'
    str += `    chil: ` + JSON.stringify(fam.chil) + ',\n'
    str += `}],\n`
    return str
}

function checkFAM(fam) {
    if (fam.husb.length>1) multiples.push([fam.key, 'HSUB', fam.husb])
    if (fam.wife.length>1) multiples.push([fam.key, 'WIFE', fam.wife])
    if (fam.date.length>1) multiples.push([fam.key, 'MARR-DATE', fam.date])
    if (fam.plac.length>1) multiples.push([fam.key, 'MARR-PLAC', fam.plac])
}

const time2 = new Date()
console.log( `${progName} (${time2-time1} msec)`)
console.log(`    Wrote ${famsArray.length} FAM records from '${inputFile}' into '${outputFile}'.`)
console.log(`    There are ${multiples.length} FAM records with multiple HUSB/WIFE/MARR entries that should be resolved in 'Preferred.js'.`)
