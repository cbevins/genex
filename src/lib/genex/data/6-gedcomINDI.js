/**
 * Collects GEDCOM INDI info into a JSON object for subsequent diagnostics and processing.
 * This allows checking for multiple/conflicting NAME, SEX, BIRT, DEAT, FAMC info.
 */
// Modules
import fs from 'fs'
import { constructGedcomNestedRecords } from '../gedcom/constructGedcomNestedRecords.js'
import { constructGedcomINDIBlock, fmtINDIBlock, checkMultipleRecords } from '../gedcom/constructGedcomINDIBlock.js'
// Data
import {_gedcomRecordsFiltered } from './generated/gedcom/_gedcomRecordsFiltered.js'
import {_gedcomINDIPreferredMASTER } from './customized/_gedcomINDIPreferredMASTER.js'

const samuelBevins = '@I292505359674@'
const williamLongfordBevins = '@I292505366205@'

const time1 = new Date()
const progName = (process.argv[1]).split('\\').pop()
const inputFile = './generated/gedcom/_gedcomRecordsFiltered.js'
const preferredFile = './customized/_gedcomINDIPreferredMASTER.js'
const multiplesName = '_gedcomINDIMultipleRecords'
const multiplesFile = `./generated/gedcom/${multiplesName}.js`

// Use a GedcomNestedRecords instance since it handles all parsing, CONC, and CONT
const gedcom = constructGedcomNestedRecords(_gedcomRecordsFiltered)
const indiMap = gedcom.topLevelRecordsFor('INDI')
const indiArray = Array.from(indiMap.entries())

let multiples = []
for(let i=0; i<indiArray.length; i++) {
    const block = constructGedcomINDIBlock(gedcom, indiArray[i]) // indiArray[i] is the head record
    const mult = checkMultipleRecords(block)
    for(let i=0; i<mult.length; i++) {
        multiples.push(mult[i])
    }
    if (mult.length) multiples.push('')
}
console.log(multiples)

function processINDI(head) {
    const block = constructGedcomINDIBlock(gedcom, head)
    const mult = checkMultipleRecords(block)
    return mult
}

const head = [
    `// auto-generated by ${progName} on ${new Date().toLocaleString()}`,
    `// from FILTERED GEDCOM JSON records file '${inputFile}'`,
    `// Indicate preferred by copying each block into ${preferredFile}`
    `export const ${multiplesName} = [`
]
let js = head.join('\n') + '\n'
js += multiples.join('\n')
js += ']\n'
fs.writeFile(multiplesFile, js, function (err) { if (err) throw err })

const time2 = new Date()
console.log( `${progName} (${time2-time1} msec)`)
