import fs from 'fs'
import { Genex, Channels } from '../genex/index.js'

const time1 = new Date()
const progName = (process.argv[1]).split('\\').pop()
const placesName = '_placesResults'
const placesFile = `./diagnostics/genex/${placesName}.js`

const genex = new Genex()

function fix(str) { return JSON.stringify(str) }

function countPlaces(people) {
    const counts = new Map()

    function add(place, vicKeys, idx) {  // 1=birth, 2=death, 3=resi, 0=totl
        if (! counts.has(place)) counts.set(place, [place, 0, 0, 0, 0, vicKeys])
        let curr = counts.get(place) 
        curr[idx+1]++
        curr[1]++
        counts.set(place, curr)
    }

    for(let i=0; i<people.length; i++) {
        const person = people[i]
        const name = person.label()
        let place = person.birthPlaceStandardPrefix()
        let vicKeys = person.birthPlaceVicKeys()
        let year = person.birthYear()
        add(place, vicKeys, 1)

        place = person.deathPlaceStandardPrefix()
        vicKeys = person.deathPlaceVicKeys()
        year = person.deathYear()
        add(place, vicKeys, 2)

        let n = person.residences().length
        for(let i=0; i<n; i++) {
            place = person.residencePlaceStandardPrefix(i)
            vicKeys = person.residencePlaceVicKeys(i)
            year = person.residenceYear(i)
            add(place, vicKeys, 3)
        }
    }
    const ar = Array.from(counts.values())
    ar.sort(function(a, b) {return a[0].localeCompare(b[0])})
    return ar
}

console.log(`\n${progName}`)
console.log(`    1 - created Genex with ${genex.people().length} Person and ${genex.family().length} Family instances.`)

let counts = new Map()
const cdbPerson = genex.person('Collin Douglas Bevins 1952')
const cdbAncestors = new Channels(cdbPerson).persons()
const cdbPlaces = countPlaces(cdbAncestors)
writePlaces('_placesResultsCdb', cdbPlaces, cdbAncestors)

const bjrPerson = genex.person("Barbara Jeanne Riley 1953")
const bjrAncestors = new Channels(bjrPerson).persons()
const bjrPlaces = countPlaces(bjrAncestors)
writePlaces('_placesResultsBjr', bjrPlaces, bjrAncestors)

const allPlaces = countPlaces(genex.people())
writePlaces('_placesResultsAll', allPlaces, genex.people())

// Write Genex _places.js file
function writePlaces(placesName, places, people) {
    const placesFile = `./diagnostics/genex/${placesName}.js`
    let js = `// auto-generated by ${progName} on ${new Date().toLocaleString()}\n`
        + `// Contains ${places.length} Places from ${people.length} Persons:\n`
        + `// [<standardPlace> <total events>, <births>, <deaths>, <residences>]\n`
        + `export const ${placesName} = [\n`
    for(let i=0; i<places.length; i++) {
        const [place, total, birth, death, res, vicKeys] = places[i]
        js += `    [${fix(place).padEnd(24)}, ${total},    ${birth},    ${death},    ${res}, ${fix(vicKeys)}],\n`
    }
    js += ']\n'
    fs.writeFile(placesFile, js, function (err) { if (err) throw err })
    console.log(`    2 - wrote ${places.length} Place birth-death-res counts for ${places.length} of ${people.length} Persons into '${placesFile}'.`)
}

console.log(`    Successfully completed in ${new Date()-time1} msec`)
