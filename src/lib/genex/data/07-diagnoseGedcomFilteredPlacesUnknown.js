import fs from 'fs'
import { parseRecord } from '../gedcom/parseRecord.js'
import { _filteredRecords } from './generated/gedcom/_filteredRecords.js'
import { _gedcomKnownPlaces } from './customized/_gedcomKnownPlacesMASTER.js'

const time1 = new Date()
const progName = (process.argv[1]).split('\\').pop()
const masterFile = './customized/_gedcomPLAC2StandardMASTER.js'
const inputFile = './generated/gedcom/_filteredRecords.js'
const unknownName = '_filteredPlacesUnknown'
const unknownFile = `./diagnostics/gedcom/${unknownName}.js`

// Checks if each PLAC record content is in the MASTER array
function findGedcomPlaceKeys(records, placeMap) {
    const foundMap = new Map()
    const unknown = []
    for (let i=0; i<records.length; i++) {
        const data = parseRecord(records[i], i+1)
        if (data) {
            const [level, type, content] = data
            if (type === 'PLAC') {
                const standardKey = placeMap.get(content)
                if (standardKey) {
                    foundMap.set(content, standardKey)
                } else {
                    // console.log(`Missing PLAC key '${content}' at GEDCOM record index ${i}`)
                    unknown.push([content, i])
                }
            }
        }
    }
    unknown.sort()
    const found = Array.from(foundMap.entries()).sort()
    return [found, unknown]
}

const map = new Map(_gedcomKnownPlaces)
const [found, unknown] = findGedcomPlaceKeys(_filteredRecords, map)

// Write unknown PLACes
let head = [
    `// auto-generated by ${progName} on ${new Date().toLocaleString()}`,
    `// from FILTERED GEDCOM JSON records file '${inputFile}'`,
    `// Each element is [<GEDCOM PLAC record content>, <GEDCOM PLAC record index>] pair`,
    `export const ${unknownName} = [`
]
let js = head.join('\n') + '\n'
for(let i=0; i<unknown.length; i++) {
    const [content, recordIdx] = unknown[i]
    js += `    [${JSON.stringify(content)}, ${recordIdx}],\n`
}
js += ']\n'
fs.writeFile(unknownFile, js, function (err) { if (err) throw err })
    
console.log(`\n${progName}`)
console.log(`    1 - read ${_filteredRecords.length} [<GEDCOM record>] elements from '${inputFile}'.`)
console.log(`    2 - wrote ${unknown.length} *UNKNOWN* [GEDCOM PLAC content>, <GEDCOM PLAC record index>] elements into '${unknownFile}'.`)
console.log(`    Successfully completed in ${new Date()-time1} msec`)
