import fs from 'fs'
import { parseRecord } from '../gedcom/parseRecord.js'
import { _gedcomRecordsAll as _curr } from './generated/gedcom/_gedcomRecordsAll.js'
import { _gedcomRecordsAll as _prev } from './generated/gedcom/_gedcomRecordsAllPrev.js'

const time1 = new Date()
const progName = (process.argv[1]).split('\\').pop()
const currFile = './generated/gedcom/_gedcomRecordsAll.js'
const prevFile = './generated/gedcom/_gedcomRecordsAllPrev.js'
const varName = '_validateIndiNameStability'
const outputFile = `./diagnostics/gedcom/${varName}.js`

function getIndiNames(records) {
    let indi = ''
    const ar = []
    for(let i=0; i<records.length; i++) {
        const data = parseRecord(records[i], i+1)
        if (data) {
            const [level, type, content] = data
            if (type === 'INDI') {
                indi = content
            } else if (type === 'NAME') {
                ar.push(`${indi}=${content}`)
            }
        }
    }
    return ar
}

const prev = new Set(getIndiNames(_prev))
const curr = new Set(getIndiNames(_curr))
const diff = curr.difference(prev)  // returns all curr INDI-NAME not in prev

const head = [
    `// auto-generated by ${progName} on ${new Date().toLocaleString()}`,
    `// Array contains new GEDCOM INI key-name pairs that have changed.`,
    `export const ${varName} = [`
]
let js = head.join('\n') +  JSON.stringify(diff) + '\n'
js += ']\n'
fs.writeFile(outputFile, js, function (err) { if (err) throw err })

console.log(`\n${progName}`)
console.log(`    1 - read ${prev.size} [<GEDCOM INDI-NAME>] pairs from '${prevFile}'.`)
console.log(`    2 - read ${curr.size} [<GEDCOM INDI-NAME>] pairs from '${currFile}'.`)
console.log(`    2 - wrote ${diff.size} [<GEDCOM INDI-NAME>] pairs in current, but not in previous, version into '${outputFile}'.`)
console.log(`    Successfully completed in ${new Date()-time1} msec`)
